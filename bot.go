package main

import (
	"algoru/controller"
	"encoding/json"
	"io/ioutil"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

type Data struct {
	Key1 string `json:"keyTg"`
	Key2 string `json:"keyAi"`
}

func main() {
	var data, err = ioutil.ReadFile("./resources/tokens.json")
	if err != nil {
		log.Panic(err)
	}
	var d Data
	err = json.Unmarshal(data, &d)
	if err != nil {
		log.Panic(err)
	}

	bot, err := tgbotapi.NewBotAPI(d.Key1)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = true

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil && update.CallbackQuery == nil {
			continue
		}

		if update.Message != nil && update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				start(update, bot)
			case "feedback":
				feedback(update, bot)
			default:
				continue
			}
			continue
		}

		if update.CallbackQuery != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
			buttonText := update.CallbackQuery.Data
			resp, err1 := controller.Ask(buttonText, d.Key2)
			if err1 != "" {
				resp = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ... ."
			}
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, resp)
			_, err := bot.Send(msg)
			if err != nil {
				log.Printf("Error sending message to chat - %v", err)
				return
			}
		} else {
			mainHandler(update, bot, d.Key2)
		}
	}
}

func start(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	message := "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –∏ —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã! " +
		"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\nüëâ –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ–∏—Å–∫ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –¥–µ—Ä–µ–≤–µ?\n\n" +
		"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n" +
		"üí¨ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–æ–µ–∫—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /feedback"

	// –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–æ–∫
	row1 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?", "What's is your name? (Answer in Russian)"),
		tgbotapi.NewInlineKeyboardButtonData("–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?", "How old of you (Answer in Russian)"),
		tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å?", "What a day today? (Answer in Russian)"),
		tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∫–æ–π —É –º–µ–Ω—è –≥–æ—Ä–æ–¥?", "What is your hometown ? (Answer in Russian)"),
	)

	row2 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ú–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?", "What is your favorite color? (Answer in Russian)"),
		tgbotapi.NewInlineKeyboardButtonData("–ê–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–º –ù—å—é—Ç–æ–Ω–∞?", "Can you write about newton method? (Answer in Russian)"),
	)

	row3 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–†–µ—à–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ?", "Solve a quadratic equation? (Answer in Russian)"),
		tgbotapi.NewInlineKeyboardButtonData("–ò–Ω—Ç–µ–≥—Ä–∞–ª?", "Can you write about newton integral? (Answer in Russian)"),
	)

	row4 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ü–æ—á–µ–º—É –Ω–µ–±–æ –≥–æ–ª—É–±–æ–µ?", "Why is the sky blue? (Answer in Russian)"),
		tgbotapi.NewInlineKeyboardButtonData("–ü–æ—á–µ–º—É —Ç—Ä–∞–≤–∞ –∑–µ–ª–µ–Ω–∞—è?", "Why is the grass green? (Answer in Russian)"),
	)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(row1, row2, row3, row4)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)

	msg.ReplyMarkup = keyboard

	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("Error sending message to chat - %v", err)
		return
	}
}

func feedback(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤ https://forms.gle/UkhZzFWPpipTvRiQA")
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("Error sending message to chat - %v", err)
		return
	}
}

func mainHandler(update tgbotapi.Update, bot *tgbotapi.BotAPI, apiKey string) {
	response, err := controller.Ask(strings.TrimSpace(update.Message.Text), apiKey)
	if err != "" {
		log.Printf("Error generating text - %v", err)
		return
	}
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, response)
	_, err2 := bot.Send(msg)
	if err2 != nil {
		log.Printf("Error sending message to chat - %v", err2)
		return
	}
}
